"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[3343],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,h=d["".concat(u,".").concat(c)]||d[c]||m[c]||i;return t?a.createElement(h,l(l({ref:n},s),{},{components:t})):a.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={id:"basic-synchronization-patterns",title:"Basic Synchronization Patterns",tags:["Concurrent Programming","Synchronization Patterns","Semaphore","Mutex","Exclusion","Race Condition","Rendezvous","Barrier","Reusable Barrier","Multiplex","Signalizing","Busy Waiting","Conditional Variables"]},l="Basic Synchronization Patterns",o={unversionedId:"concurrent-programming/basic-synchronization-patterns",id:"concurrent-programming/basic-synchronization-patterns",title:"Basic Synchronization Patterns",description:"This are the basic synchronization patterns that can be used to solve a variety of synchronization problems.",source:"@site/my-brain/concurrent-programming/basic-synchronization-patterns.md",sourceDirName:"concurrent-programming",slug:"/concurrent-programming/basic-synchronization-patterns",permalink:"/my-brain/concurrent-programming/basic-synchronization-patterns",draft:!1,tags:[{label:"Concurrent Programming",permalink:"/my-brain/tags/concurrent-programming"},{label:"Synchronization Patterns",permalink:"/my-brain/tags/synchronization-patterns"},{label:"Semaphore",permalink:"/my-brain/tags/semaphore"},{label:"Mutex",permalink:"/my-brain/tags/mutex"},{label:"Exclusion",permalink:"/my-brain/tags/exclusion"},{label:"Race Condition",permalink:"/my-brain/tags/race-condition"},{label:"Rendezvous",permalink:"/my-brain/tags/rendezvous"},{label:"Barrier",permalink:"/my-brain/tags/barrier"},{label:"Reusable Barrier",permalink:"/my-brain/tags/reusable-barrier"},{label:"Multiplex",permalink:"/my-brain/tags/multiplex"},{label:"Signalizing",permalink:"/my-brain/tags/signalizing"},{label:"Busy Waiting",permalink:"/my-brain/tags/busy-waiting"},{label:"Conditional Variables",permalink:"/my-brain/tags/conditional-variables"}],version:"current",frontMatter:{id:"basic-synchronization-patterns",title:"Basic Synchronization Patterns",tags:["Concurrent Programming","Synchronization Patterns","Semaphore","Mutex","Exclusion","Race Condition","Rendezvous","Barrier","Reusable Barrier","Multiplex","Signalizing","Busy Waiting","Conditional Variables"]},sidebar:"myBrainSidebar",previous:{title:"Concurrent Programming",permalink:"/my-brain/concurrent-programming/"},next:{title:"Classical Synchronization Problems",permalink:"/my-brain/concurrent-programming/classical-synchronization-problems"}},u={},p=[{value:"Signalizing",id:"signalizing",level:2},{value:"Rendezvous",id:"rendezvous",level:2},{value:"Mutex",id:"mutex",level:2},{value:"Multiplex",id:"multiplex",level:2},{value:"Barrier",id:"barrier",level:2},{value:"Reusable Barrier",id:"reusable-barrier",level:2},{value:"Queue",id:"queue",level:2},{value:"Exclusive Queue",id:"exclusive-queue",level:3},{value:"Condition Variables",id:"condition-variables",level:2}],s={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basic-synchronization-patterns"},"Basic Synchronization Patterns"),(0,r.kt)("p",null,"This are the basic synchronization patterns that can be used to solve a variety of synchronization problems."),(0,r.kt)("p",null,"In the examples the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function is the main thread, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"f1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"f2")," are functions that can be run by threads, they run concurrently and can be run in any order."),(0,r.kt)("h2",{id:"signalizing"},"Signalizing"),(0,r.kt)("p",null,"Signalizing is a pattern used to a thread wait for another thread to run something. This pattern is used to avoid busy waiting."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"f1")," must run before ",(0,r.kt)("inlineCode",{parentName:"li"},"f2"),"."),(0,r.kt)("li",{parentName:"ul"},"Thread A or B can run before the other.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\nf1Done = Semaphore(0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\nf1()\nf1Done.signal()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nf1Done.wait()\nf2()\n")),(0,r.kt)("p",null,"In this case the semaphore ",(0,r.kt)("inlineCode",{parentName:"p"},"f1Done")," start with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". So, if Thread B gain CPU first, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"wait")," the semaphore will be decremented and will become ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),", so the thread will be blocked. When Thread A gain CPU, the semaphore will be incremented and will become ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", so the Thread B will be unblocked and will run ",(0,r.kt)("inlineCode",{parentName:"p"},"f2"),"."),(0,r.kt)("p",null,"If Thread A gain CPU first, the semaphore will be incremented and will become ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", so the Thread B will not be blocked."),(0,r.kt)("p",null,"Using this pattern, we can guarantee that ",(0,r.kt)("inlineCode",{parentName:"p"},"f1")," will run before ",(0,r.kt)("inlineCode",{parentName:"p"},"f2"),"."),(0,r.kt)("h2",{id:"rendezvous"},"Rendezvous"),(0,r.kt)("p",null,"Rendezvous is synchronization problem that occurs when Thread A has to wait to Thread B and Thread B has to wait to Thread A."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a1")," must runs before ",(0,r.kt)("inlineCode",{parentName:"li"},"b2"),";"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"b1")," must runs before ",(0,r.kt)("inlineCode",{parentName:"li"},"a2"),";")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\naArrived = Semaphore(0)\nbArrived = Semaphore(0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\na1()\naArrived.signal() # signalize that Thread A arrived at rendezvous \nbArrived.wait() # wait to Thread B arrive at rendezvous\na2()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nb1()\nbArrived.signal() # signalize that Thread B arrived at rendezvous\naArrived.wait() # wait to Thread A arrive at rendezvous\nb2()\n")),(0,r.kt)("h2",{id:"mutex"},"Mutex"),(0,r.kt)("p",null,"Mutex is a solution to enforce mutual exclusion (event cannot happens at the same time) granting that only one thread will access the lines inside the block starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"mutex.wait()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mutex.signal()"),", this block of code is called ",(0,r.kt)("inlineCode",{parentName:"p"},"critical region"),". A common problems works with threads is operation on shared variables, a sum like ",(0,r.kt)("inlineCode",{parentName:"p"},"count = count + 1")," take more that 1 operation on the CPU, so only one thread should run this line per time, otherwise the result will be wrong."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count")," is a shared variable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count = count + 1")," is a critical region."),(0,r.kt)("li",{parentName:"ul"},"only one thread can run the critical region at the same time.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\nmutex = Semaphore(1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\nmutex.wait()        # wait to the mutex be free\ncount = count + 1   # only one thread can run this line per time\nmutex.signal()      # signalize that the mutex is free\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nmutex.wait()        # wait to the mutex be free\ncount = count + 1   # only one thread can run this line per time\nmutex.signal()      # signalize that the mutex is free\n")),(0,r.kt)("h2",{id:"multiplex"},"Multiplex"),(0,r.kt)("p",null,"Multiplex is a solution like Multex, but now we can have ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," threads running the ",(0,r.kt)("inlineCode",{parentName:"p"},"critical region")," at the same time."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"critical region")," should be executed only by ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," threads at the same time, in this case lets simulate with ",(0,r.kt)("inlineCode",{parentName:"li"},"n = 2"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\nn = 2\nmultiplex = Semaphore(n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\nmultiplex.wait()\n# critical region\nmultiplex.signal()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nmultiplex.wait()\n# critical region\nmultiplex.signal()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread C\n\nmultiplex.wait()\n# critical region\nmultiplex.signal()\n")),(0,r.kt)("p",null,"In this example, only 2 threads can run the ",(0,r.kt)("inlineCode",{parentName:"p"},"critical region")," at the same time. So if Thread A and B run first ",(0,r.kt)("inlineCode",{parentName:"p"},"mutex.wait()"),", then they are running the ",(0,r.kt)("inlineCode",{parentName:"p"},"critical region"),", the Thread C will be blocked in the ",(0,r.kt)("inlineCode",{parentName:"p"},"mutex.wait()"),"."),(0,r.kt)("p",null,"For this example, we can have 3 scenarios:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Thread A"),(0,r.kt)("th",{parentName:"tr",align:null},"Thread B"),(0,r.kt)("th",{parentName:"tr",align:null},"Thread C"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Running"),(0,r.kt)("td",{parentName:"tr",align:null},"Running"),(0,r.kt)("td",{parentName:"tr",align:null},"Waiting")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Running"),(0,r.kt)("td",{parentName:"tr",align:null},"Waiting"),(0,r.kt)("td",{parentName:"tr",align:null},"Running")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Waiting"),(0,r.kt)("td",{parentName:"tr",align:null},"Running"),(0,r.kt)("td",{parentName:"tr",align:null},"Running")))),(0,r.kt)("h2",{id:"barrier"},"Barrier"),(0,r.kt)("p",null,"Barrier is a generalization of the Rendezvous pattern. In this pattern, we can have ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," threads waiting for each other. So, when ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," threads arrive at the barrier, all threads are unblocked."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n-1")," threads must run ",(0,r.kt)("inlineCode",{parentName:"li"},"barrier.wait()")," before all threads can continue.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\nn = 3\nbarrier = Barrier(n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\na1()\nbarrier.wait()\na2()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nb1()\nbarrier.wait()\nb2()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread C\n\nc1()\nbarrier.wait()\nc2()\n")),(0,r.kt)("p",null,"Let simulate a execution with this 3 threads:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Schedule will order the threads in this order: A -> B -> C;")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Thread A will run ",(0,r.kt)("inlineCode",{parentName:"li"},"a1()"),";"),(0,r.kt)("li",{parentName:"ol"},"Thread A will run ",(0,r.kt)("inlineCode",{parentName:"li"},"barrier.wait()"),", the barrier will be decremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),", and the thread will be blocked;"),(0,r.kt)("li",{parentName:"ol"},"Thread B will run ",(0,r.kt)("inlineCode",{parentName:"li"},"b1()"),";"),(0,r.kt)("li",{parentName:"ol"},"Thread B will run ",(0,r.kt)("inlineCode",{parentName:"li"},"barrier.wait()"),", the barrier will be decremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),", and the thread will be blocked;"),(0,r.kt)("li",{parentName:"ol"},"Thread C will run ",(0,r.kt)("inlineCode",{parentName:"li"},"c1()"),";"),(0,r.kt)("li",{parentName:"ol"},"Thread C will run ",(0,r.kt)("inlineCode",{parentName:"li"},"barrier.wait()"),", the barrier will be decremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", and all threads will be unblocked;")),(0,r.kt)("p",null,"Lets implement a Barrier using a Semaphore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Barrier() \n    def __init__(self, n):\n        self.count = n\n        self.mutex = Semaphore(1) # mutex to protect the count\n        self.barrier = Semaphore(0)\n\n    def wait(self):\n        self.mutex.wait() \n        self.count -= 1\n        if self.count != 0:\n            self.barrier.wait() # block n - 1 first threads, the last thread never run this line\n        self.mutex.signal()\n        self.barrier.signal() # the last thread will be the first to run this line, will unblock one thread and the other threads will run this line in sequence\n")),(0,r.kt)("h2",{id:"reusable-barrier"},"Reusable Barrier"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Need to study more about this pattern.")),(0,r.kt)("h2",{id:"queue"},"Queue"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Need to study more about this pattern.")),(0,r.kt)("p",null,"Queue is a pattern where a thread can wait for another thread to run something. We want that on thread run a code alongside other runs another."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"f1")," must run alongside ",(0,r.kt)("inlineCode",{parentName:"li"},"f2"),";"),(0,r.kt)("li",{parentName:"ul"},"Thread A or B can run before the other.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\nf1Queue = Semaphore(0)\nf2Queue = Semaphore(0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\nf2Queue.signal() # Thread A signalize that it wants to run f1 alongside f2\nf1Queue.wait() # Thread A wait to Thread B signalize that it can run f1\nf1()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nf1Queue.signal() # Thread B signalize that it wants to run f2 alongside f1\nf2Queue.wait() # Thread B wait to Thread A signalize that it can run f2\nf2()\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This is like a Rendezvous")),(0,r.kt)("p",null,"Lets simulate a execution with this 2 threads:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Schedule will order the threads in this order: A -> B;")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Thread A will run ",(0,r.kt)("inlineCode",{parentName:"li"},"f2Queue.signal()"),", the semaphore ",(0,r.kt)("inlineCode",{parentName:"li"},"f2Queue")," will be incremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),";"),(0,r.kt)("li",{parentName:"ol"},"Thread A will run ",(0,r.kt)("inlineCode",{parentName:"li"},"f1Queue.wait()"),", the semaphore ",(0,r.kt)("inlineCode",{parentName:"li"},"f1Queue")," will be decremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"-1"),", and the thread will be blocked;"),(0,r.kt)("li",{parentName:"ol"},"Thread B will run ",(0,r.kt)("inlineCode",{parentName:"li"},"f1Queue.signal()"),", the semaphore ",(0,r.kt)("inlineCode",{parentName:"li"},"f1Queue")," will be incremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),";"),(0,r.kt)("li",{parentName:"ol"},"Thread B will run ",(0,r.kt)("inlineCode",{parentName:"li"},"f2Queue.wait()"),", the semaphore ",(0,r.kt)("inlineCode",{parentName:"li"},"f2Queue")," will be decremented to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),";"),(0,r.kt)("li",{parentName:"ol"},"Now both threads are unblocked and can run ",(0,r.kt)("inlineCode",{parentName:"li"},"f1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"f2")," alongside.")),(0,r.kt)("h3",{id:"exclusive-queue"},"Exclusive Queue"),(0,r.kt)("p",null,"Exclusive Queue is a pattern where the thread that is blocking is only running with the thread that signalize it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# main\n\nf1Counter = f2Counter = 0\nmutex = Semaphore(1)\nf1Queue = Semaphore(0)\nf2Queue = Semaphore(0)\nrendezvous = Semaphore(0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\nmutex.wait()\nif f1Count > 0:\n    f1Counter--\n    f1Queue.signal()\nelse:\n    f2Counter++\n    mutex.signal()\n    f2Queue.wait() #t1\n\nf1()\nrendezvous.wait()\nmutex.signal()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\nmutex.wait()\nif f2Counter > 0:\n    f2Counter--\n    f2Queue.signal()\nelse:\n    f1Counter++\n    mutex.signal()\n    f1Queue.wait()\n\nf2()\nrendezvous.signal()\n")),(0,r.kt)("h2",{id:"condition-variables"},"Condition Variables"),(0,r.kt)("p",null,"This pattern is used to allow a thread take of the scheduling queue until there is a signal from another thread. This allow a thread wait until another thread finish some work."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// main\n\nint is_done;\nmutex_t done_lock;\ncond_t done_cond;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"// Thread A\n\nmutex_lock(&done_lock) // lock the mutex to access is_done\nis_done = 1; // signalize that the work is done\ncond_signal(&done_cond) // signalize to all threads that are waiting in the done_cond\nmutex_unlock(&done_lock) // unlock the mutex \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"# Thread B\n\nmutex_lock(&done_lock) // lock the mutex to access is_done\nif (!is_done) // if the work is not done\n    cond_wait(&done_cond, &done_lock) // wait until the condition is done\nmutex_unlock(&done_lock) // unlock the mutex\n")),(0,r.kt)("p",null,"In this example, the Thread B will wait until the Thread A signalize that the work is done."),(0,r.kt)("p",null,"The thread B will execute this steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Lock the mutex to access the variable ",(0,r.kt)("inlineCode",{parentName:"li"},"is_done"),";"),(0,r.kt)("li",{parentName:"ol"},"Check if the work is done;"),(0,r.kt)("li",{parentName:"ol"},"If the work is not done, call ",(0,r.kt)("inlineCode",{parentName:"li"},"cond_wait")," that will put thread to wait until the ",(0,r.kt)("inlineCode",{parentName:"li"},"done_cond")," is done, and will unlock the mutex ",(0,r.kt)("inlineCode",{parentName:"li"},"done_lock"),";"),(0,r.kt)("li",{parentName:"ol"},"When the ",(0,r.kt)("inlineCode",{parentName:"li"},"done_cond")," is done, the thread will be unblocked and will lock the mutex ",(0,r.kt)("inlineCode",{parentName:"li"},"done_lock"),";"),(0,r.kt)("li",{parentName:"ol"},"Then the thread will unlock the mutex ",(0,r.kt)("inlineCode",{parentName:"li"},"done_lock")," and will continue the execution.;")))}m.isMDXComponent=!0}}]);