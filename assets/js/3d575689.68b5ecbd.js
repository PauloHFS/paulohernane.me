"use strict";(self.webpackChunkpaulohernane_me=self.webpackChunkpaulohernane_me||[]).push([[1382],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>y});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,y=u["".concat(l,".").concat(f)]||u[f]||p[f]||a;return r?t.createElement(y,i(i({ref:n},m),{},{components:r})):t.createElement(y,i({ref:n},m))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6629:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const a={id:"classical-synchronization-problems",title:"Classical Synchronization Problems",tags:["Concurrent Programming","Synchronization Patterns"]},i="Classical Synchronization Problems",s={unversionedId:"concurrent-programming/classical-synchronization-problems",id:"concurrent-programming/classical-synchronization-problems",title:"Classical Synchronization Problems",description:"Producer-Consumer Problem",source:"@site/my-brain/concurrent-programming/classical-synchronization-problems.md",sourceDirName:"concurrent-programming",slug:"/concurrent-programming/classical-synchronization-problems",permalink:"/my-brain/concurrent-programming/classical-synchronization-problems",draft:!1,tags:[{label:"Concurrent Programming",permalink:"/my-brain/tags/concurrent-programming"},{label:"Synchronization Patterns",permalink:"/my-brain/tags/synchronization-patterns"}],version:"current",frontMatter:{id:"classical-synchronization-problems",title:"Classical Synchronization Problems",tags:["Concurrent Programming","Synchronization Patterns"]},sidebar:"myBrainSidebar",previous:{title:"Basic Synchronization Patterns",permalink:"/my-brain/concurrent-programming/basic-synchronization-patterns"},next:{title:"Semaphore",permalink:"/my-brain/concurrent-programming/semaphore"}},l={},c=[{value:"Producer-Consumer Problem",id:"producer-consumer-problem",level:2}],m={toc:c},u="wrapper";function p(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"classical-synchronization-problems"},"Classical Synchronization Problems"),(0,o.kt)("h2",{id:"producer-consumer-problem"},"Producer-Consumer Problem"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# main\nMAX_SIZE = 2 # buffer size\n\nclass Buffer:\n    def __init__(self, size):\n        self.buffer = [None for _ in range(size)]\n        self.size = size\n        self.fill = 0\n        self.use = 0\n        self.mutex = Semaphore(1)\n        # TEST if using 1 or 2 semaphores is better\n\n    def put(v):\n        self.mutex.wait()\n        self.buffer[self.fill] = v\n        self.fill = (self.fill + 1) % self.size\n        self.mutex.signal()\n\n    def get():\n        self.mutex.wait()\n        v = self.buffer[self.use]\n        self.use = (self.use + 1) % self.size\n        self.mutex.signal()\n        return v\n\nbuffer = Buffer(MAX_SIZE)\nproducerDone = Semaphore(0)\nconsumerDone = Semaphore(MAX_SIZE)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Thread A\n\ndef producer():\n    for i in range(0, 100):\n        consumerDone.wait()\n        buffer.put(i)\n        producerDone.signal()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Thread B\n\ndef consumer():\n    for i in range(0, 100):\n        producerDone.wait()\n        v = buffer.get()\n        print(v)\n")))}p.isMDXComponent=!0}}]);